#!/usr/bin/env bash
# start
# Print script Usage
function printUsage {
    echo -e ""
    echo -e "${BOLD}ROCmML Version ${RET_VERSION}${END}"
    echo -e ""
    echo -e "${BOLD}Description:${END} ${FG_DARK_GRAY}${DESCRIPTION}${END}"
    echo -e ""
    echo -e "${BOLD}Usage: ${FG_GREEN}./ret${END} [<option>]"
    echo -e "       ${BOLD}${FG_GREEN}./ret${END} <command> [<option>]"
    echo -e "${BOLD}Example:${END}"
    echo -e "       ${BOLD}${FG_GREEN}./ret${END} install tensorflow"
    echo -e ""
    echo -e "${BOLD}command:${END}"
    echo -e "    [install]   <Package>              ${FG_LIGHT_BLUE}: Install ROCm or ML Framework TF/PT${END}"
    echo -e "    [remove]    <Package>              ${FG_LIGHT_BLUE}: Remove ROCm or ML Framework TF/PT${END}"
    echo -e "    [update]    <Package>              ${FG_LIGHT_BLUE}: Update ROCm or ML Framework TF/PT${END}"
    echo -e "    [validate]                         ${FG_LIGHT_BLUE}: System validation${END}"
    echo -e "    [benchmark] <Packages> <Model>     ${FG_LIGHT_BLUE}: Run benchmark for specific ML Framework${END}"
    echo -e "    [show]                             ${FG_LIGHT_BLUE}: Show system HW and SW details${END}"
    echo -e "    [build] <Container> <ImageName>    ${FG_LIGHT_BLUE}: Build ROCm Container either with Docker or Singularity${END}"
    echo -e ""
    echo -e "${BOLD}Package:${END}"
    echo -e "    [rocm]                             ${FG_LIGHT_BLUE}: ROCm-dkms packages${END}"
    echo -e ""
    echo -e "${BOLD}ML Package:${END}"
    echo -e "    [tensorflow]                       ${FG_LIGHT_BLUE}: Tensorflow Framework${END}"
    echo -e "    [pytorch]                          ${FG_LIGHT_BLUE}: Pytorch Framework${END}"
    echo -e ""
    echo -e "${BOLD}HPC Package:${END}"
    echo -e "    [namd]                             ${FG_LIGHT_BLUE}: NAMD HPC Application${END}"
    echo -e ""
    echo -e "${BOLD}Container:${END}"
    echo -e "    [docker]                           ${FG_LIGHT_BLUE}: Build Docker Container${END}"
    echo -e "    [singularity]                      ${FG_LIGHT_BLUE}: Build Singularity Container${END}"
    echo -e "    [ImageName]                        ${FG_LIGHT_BLUE}: Choosing an OS Base Image from [ubuntu:16.04, ubuntu:18.04, centos:7] Default is [ubuntu:18.04]${END}"
    echo -e ""
    echo -e "${BOLD}Model:${END}"
    echo -e "    [vgg16]                            ${FG_LIGHT_BLUE}: vgg16 model${END}"
    echo -e "    [alexnet]                          ${FG_LIGHT_BLUE}: alexnet model${END}"
    echo -e "    [resnet50]                         ${FG_LIGHT_BLUE}: resnet50 model. Default Model${END}"
    echo -e ""
    echo -e "${BOLD}Options:${END}"
    echo -e "    [-py2|-py3]                        ${FG_LIGHT_BLUE}: Define the Python version. Default is [Python3]${END}"
    echo -e "    [-h|--help]                        ${FG_LIGHT_BLUE}: Show this help message${END}"
    echo -e "    [-v|--version]                     ${FG_LIGHT_BLUE}: Show version of this package${END}"
    echo -e "    [--dryrun]                         ${FG_LIGHT_BLUE}: Show what would be happened${END}"
    echo -e "    [-d|--debug]                       ${FG_LIGHT_BLUE}: Enable Debug Mode${END}"
    echo -e "    [-V|--verbose]                     ${FG_LIGHT_BLUE}: Be verbose${END}"
    echo -e "    [-q|--quiet]                       ${FG_LIGHT_BLUE}: Be quiet and omit progress indicators${END}"
    echo -e "    [-y|--yes]                         ${FG_LIGHT_BLUE}: Skip confirmation message${END}"
    echo -e "    [-ns|--nsc]                        ${FG_LIGHT_BLUE}: Skip system check steps${END}"
    echo -e "    [-nv|--nov]                        ${FG_LIGHT_BLUE}: Skip verification steps${END}"
    echo -e "    [-ic|--incontainer]                ${FG_LIGHT_BLUE}: Run RET on top of Container${END}"
    echo -e ""
    echo -e "${BOLD}Note:${END}"
    echo -e "  ${FG_DARK_GRAY}xxxxxxxxxxxx xxxxxxxxxxxxxxxxxx xx xxxxxxxxxxxxxxxx...${END}"
    echo -e
}

# Parse script args
function parseArgs {
    local __cmd_parseArgs=""
    local __arg_parseArgs=""
    local __pkgs_parseArgs=()
    local __options_parseArgs=()
    local __isPyRequired_parseArgs=1
    local __isROCmRequired_parseArgs=1
    local __hasPY_parseArgs=1

    until [ $# = 0 ]
    do
        __arg_parseArgs="$1"

        case "$__arg_parseArgs" in
            # Print Version #######################################################################
            "-v" | "--version")
              printf "ROCmML version ${RET_VERSION}\n"
              exit
             ;;

            # Print Help ##########################################################################
            "-h" | "--help")
              printUsage
              exit
            ;;

            # Force YES ###########################################################################
            "-y" | "--yes")
              FORCEYES=true
              shift
            ;;

            # Debug mode ###########################################################################
            "-d" | "--debug")
              DEBUG=true
              shift
            ;;

            # Skip System Check ###################################################################
            "-ns" | "--nsc")
              SKIPSYSC=true
              shift
            ;;

            # Skip Verification ###################################################################
            "-nv" | "--nov")
              SKIPVERI=true
              shift
            ;;

            # RET on top of Container ###################################################################
            "-ic" | "--incontainer")
              SKIPVERI=true; SKIPSYSC=true; INCONTAINER=true; SUDO_USER="root"; FG_DEFAULT_COLOR="${FG_ORANGE}"
              shift
            ;;

            # Set Python Version ##################################################################
            "-py2" | "-py3")
              __pkgs_parseArgs+=("${__arg_parseArgs:1}"); editFile "${DEF_FILE}" "PYVER=.*$" "PYVER=\"${__arg_parseArgs:1}\""; PYVER="${__arg_parseArgs:1}"; __hasPY_parseArgs=0
              shift
            ;;

            # Install ROCm from URL ###############################################################
            "-s")
              [ -z "$2" ] && { printUsage; exit; }
              [ "$RET_DISTRO" = "Ubuntu" ] && ROCM_DEB="$2" || ROCM_RPM="$2"
              shift; shift
            ;;

            # Set Command #########################################################################
            "install" | "update" | "remove" | "benchmark" | "build")
              [[ $__cmd_parseArgs ]] && logPrint "ERR" "Only one command at time!"
              __cmd_parseArgs=$__arg_parseArgs
              shift
            ;;

            # Set Packages ########################################################################
            "rocm" | "tensorflow" | "pytorch" | "namd" | "gromacs")
                # Permitted commands: install, remove and update
                if [[ ! "$__cmd_parseArgs" =~ ^("install"|"update"|"remove"|"benchmark")$ ]]; then logPrint "ERR" "Wrong command! Did you mean: $0 install $__arg_parseArgs"; exit; fi
                if [[ "$__arg_parseArgs" =~ ^("tensorflow"|"pytorch")$ ]]; then 
                    __isPyRequired_parseArgs=0; 
                    [ "${__cmd_parseArgs}" = "install" ] && __isROCmRequired_parseArgs=0; 
                fi

                [[ "$__arg_parseArgs" = "namd" ]] && { __arg_parseArgs="$__arg_parseArgs:src"; __isROCmRequired_parseArgs=0; }
		[[ "$__arg_parseArgs" = "gromacs" ]] && { __arg_parseArgs="$__arg_parseArgs:src"; __isROCmRequired_parseArgs=0; }
                __pkgs_parseArgs+=("$__arg_parseArgs");
              shift
            ;;

            "docker" | "singularity")
                # Permitted commands: install, remove and update
                if [[ ! "$__cmd_parseArgs" == "build" ]]; then logPrint "ERR" "Wrong command! Did you mean: $0 build $__arg_parseArgs"; exit; fi
                [[ $__pkgs_parseArgs ]] && logPrint "ERR" "Only one container at time!"
                [[ "$__arg_parseArgs" = "singularity" ]] && __arg_parseArgs="$__arg_parseArgs:src"
                __pkgs_parseArgs="$__arg_parseArgs";
              shift
            ;;

            "vgg16" | "alexnet" | "resnet50" | "ubuntu:16.04" | "ubuntu:18.04" | "centos:7")
                # Permitted commands: benchmark
                if [[ "$__arg_parseArgs" =~ ^("vgg16"|"alexnet"|"resnet50")$ ]]; then if [[ ! "$__cmd_parseArgs" == "benchmark" ]]; then 
                    logPrint "ERR" "Wrong command! Did you mean: $0 benchmark tensorflow $__arg_parseArgs"; exit; fi
                else
                    if [[ ! "$__cmd_parseArgs" == "build" ]]; then logPrint "ERR" "Wrong command! Did you mean: $0 build docker $__arg_parseArgs"; exit; fi
                fi
              __options_parseArgs+=("$__arg_parseArgs")
              shift
            ;;

            # Not supported args ##################################################################
            *)
              printUsage
              exit
            ;;
        esac
    done

    # Include Python Package if required
    if [ "$__cmd_parseArgs" = "install" ] && [ "${__isPyRequired_parseArgs}" -eq 0 ]; then 
        [ "${__hasPY_parseArgs}" -eq 1 ] && __pkgs_parseArgs=("${PYVER}" "${__pkgs_parseArgs[@]}") || __pkgs_parseArgs=("${PYVER}" ${__pkgs_parseArgs[@]/"${PYVER}"})
    fi

    # Run command
    if [ "${__isROCmRequired_parseArgs}" -eq 0 ]; then __pkgs_parseArgs=("rocm" ${__pkgs_parseArgs[@]/"rocm"}); fi
    [[ "$__cmd_parseArgs" ]] && cmdManager "${__cmd_parseArgs}" __pkgs_parseArgs __options_parseArgs || { printUsage; exit; }
}

# Run command
# Input $1: command
# Input $2: args (packages)
# Input $3: options
function cmdManager {
    local __cmd_cmdManager=$1
    local -n __args_cmdManager=$2
    local -n __options_cmdManager=$3

    if [ "${#__args_cmdManager[@]}" -eq 0 ]; then printUsage; exit; fi

    # YAML Pre-installation requirements
    preRequirement

    toLog "CMD" "$__cmd_cmdManager ${__args_cmdManager[@]} [cmdManager]"
    case "$__cmd_cmdManager" in
        update)
          echo "Update Command not yet implemented"
        ;;

        install)
            installCmd __args_cmdManager
            exit
        ;;

        remove)
            removeCmd __args_cmdManager
            exit
        ;;

        benchmark)
            __args_cmdManager=(${__args_cmdManager[@]/"rocm"}) # Exclude rocm
            if [ "${#__args_cmdManager[@]}" -eq 0 ]; then printUsage; exit; fi
            benchmarkCmd __args_cmdManager __options_cmdManager
            exit
        ;;   

        build)
            buildContainer __args_cmdManager __options_cmdManager
            exit
        ;;

        *)
            printUsage
            exit
        ;;
      esac
}

# Install packages
# Input $1: args (packages)
function installCmd {
    local -n __args_installCmd=$1
    local __cmd_array_installCmd=()

	# Install Packages
	for pkg in "${__args_installCmd[@]}"; do
	    case "$pkg" in
	        rocm)
                checkSys; # Check system requirements
		    ;;
            namd*)
                __cmd_array_installCmd=("source /etc/profile.d/namd.sh"); runCmd __cmd_array_installCmd "ERR" 0
            ;;
	    esac
        # Install Package
        runInstall "$pkg"
	done
}

# Run Install Process
# Input $1: pkg name
function runInstall {
    local __pkg_name_runInstall="$1"
    local __pkg_name_array_runInstall=()
    local __pkg_vers_array_runInstall=()
    local __isInstalled_runInstall=1
    local __cmd_array_runInstall=()
    local __isFromSource_runInstall=1

    # Check if package needs to be built or not
    __pkg_name_runInstall=(${__pkg_name_runInstall//:/ })
    if [ ! -z "${__pkg_name_runInstall[1]}" ]; then
        __pkg_name_runInstall="${__pkg_name_runInstall[0]}"
        __isFromSource_runInstall=0
    fi

    buildPkgArray "$__pkg_name_runInstall" __pkg_name_array_runInstall __pkg_vers_array_runInstall __isInstalled_runInstall $__isFromSource_runInstall
    [ $__isFromSource_runInstall -eq 0 ] && __pkg_name_array_runInstall=("${__pkg_name_array_runInstall[@]}" "${__pkg_name_runInstall}")

    # Install the Packages if not already installed
    checkDeps __pkg_name_array_runInstall __pkg_vers_array_runInstall "Verifying ${__pkg_name_runInstall} Dependencies"
    if [ "${#__pkg_name_array_runInstall[@]}" -ne 0 ]; then __isInstalled_runInstall=0;
        if (confirmYn "Install dependencies? [Y/n] "); then
            # Run pre installation if required
            runPreInstallation "${__pkg_name_runInstall}" __pkg_name_array_runInstall __pkg_vers_array_runInstall

            # Exclude src pkg if is from source
            [ $__isFromSource_runInstall -eq 0 ] && __pkg_name_array_runInstall=(${__pkg_name_array_runInstall[@]/"$__pkg_name_runInstall"})
            [ "${#__pkg_name_array_runInstall[@]}" -ne 0 ] && installPkg __pkg_name_array_runInstall

            case "$__pkg_name_runInstall" in
                singularity)
                    installSingularity;
                ;;
                namd)
                    installNAMD;
                ;;
		gromacs)
                    installGROMACS;
                ;;
            esac

            # Run post installation
            runPostInstallation "${__pkg_name_runInstall}"
        else
            logPrint "ERR" "Packages are required to complete this setup!" "$(printf "%s " "${__pkg_name_array_runInstall[@]}")"
        fi    
    fi

    # Run verification
    runVerification "$__pkg_name_runInstall"

    if [ $? -eq 0 ]; then
        [ "${__isInstalled_runInstall}" -ne "0" ] && __msg_rocm="The ${__pkg_name_runInstall} installation was successful!" || __msg_rocm="It seems as if ${__pkg_name_runInstall} has already been properly installed!"
        logPrint "DONE" "${__msg_rocm}"
    elif [ $? -eq 7 ]; then
        exitAll 7
    else
        logPrint "ERR" "The ${__pkg_name_runInstall} installation was not completed successfully!"
    fi
}

# Run pre installation
# Input $1: pkg name
# I/O   $2: pkg Name array
# I/O   $3: pkg Version array
function runPreInstallation {
    local __pkg_name_runPreInstallation="$1"
    local -n __pkg_name_arr_runPreInstallation="$2"
    local -n __pkg_vers_arr_runPreInstallation="$3"

    local __repo_path_runPreInstallation
    local __repo_text_runPreInstallation
    local __cmd_array_runPreInstallation=()

    case "$__pkg_name_runPreInstallation" in
        rocm)
            # Add the ROCm apt repository
            addROCmRepo
        ;;

        tensorflow)
            # Uninstall any previously-installed tensorflow whl packages
            startLoadBar "Run ${__pkg_name_runPreInstallation} Pre-Installation: Uninstall previously-installed tensorflow"; printf '\n'
            local __tf_pkg_runPreInstallation=("tensorflow:${PYPI}"); removePkg __tf_pkg_runPreInstallation
            stopLoadBar
        ;;

        pytorch)
            # Download Pytorch whl package
            if isInArray "__pkg_name_arr_runPreInstallation" "torch" INDEX; then
                WHL_URL+="$RET_DISTRO$RET_RELEASE/"

                [ "$PYVER" = "py2" ] && __pytorch_pkg_name_runPreInstallation=$PYT_PKG_PY27 || __pytorch_pkg_name_runPreInstallation=$PYT_PKG_PY36

                case "$RET_DISTRO" in
                    Ubuntu)
                        if [ $RET_RELEASE == "16.04" ]; then [ "$PYVER" = "py3" ] && __pytorch_pkg_name_runPreInstallation=$PYT_PKG_PY35; fi
                    ;;
                esac

                WHL_URL+=$__pytorch_pkg_name_runPreInstallation
                # Download source file
                startLoadBar "Download Pytorch whl package"
                __cmd_array_runPreInstallation=("su -p $SUDO_USER -c 'wget --progress=dot -P $TEMP_DIRECTRORY $WHL_URL'")
                runCmd __cmd_array_runPreInstallation "ERR" "1" "Download Pytorch whl package" "0"
                stopLoadBar

                # Exclude torch pkg and insert the new pkg name
                removeFromArray "torch" __pkg_name_arr_runPreInstallation __pkg_vers_arr_runPreInstallation
                eval __pkg_name_arr_runPreInstallation="(${__pkg_name_arr_runPreInstallation[@]} $TEMP_DIRECTRORY/$__pytorch_pkg_name_runPreInstallation:${PYPI})"
            fi
        ;;

        docker)
            addDockerRepo "https://download.docker.com/linux"
            echo ''; confirmYn "Uninstall old Docker versions? [Y/n] " || logPrint "ERR" "Uninstall Docker" "Docker" "${FAIL}"
            local __docker_pkg_runPreInstallation=("docker-*"); removePkg __docker_pkg_runPreInstallation
        ;;

        py2 | py3 | singularity | namd)
            PRE="DONOTHING"
        ;;
    esac
}

# Run post installation
# Input $1: pkg name
function runPostInstallation {
    local __pkg_name_runPostInstallation="$1"
    local __cmd_array_runPostInstallation=()

    case "$__pkg_name_runPostInstallation" in
        rocm)
            # Add user to the video group
            startLoadBar "Run ${__pkg_name_runPostInstallation} Post-Installation: Add user to the video group & put ROCm in PATH "; printf '\n'
            usermod -aG video $SUDO_USER

            # Put the ROCm binaries in PATH
            addPATH "rocm" "/opt/rocm/bin:/opt/rocm/profiler/bin:/opt/rocm/opencl/bin/x86_64"
            stopLoadBar
        ;;

        tensorflow)
            POST="DONOTHING"
        ;;

        pytorch)
            POST="DONOTHING"
        ;;

        py2 | py3)
            POST="DONOTHING"
        ;;

        docker)
            __cmd_array_runPostInstallation=("systemctl start docker"); runCmd __cmd_array_runPostInstallation "ERR"
            __cmd_array_runPostInstallation=("systemctl enable docker"); runCmd __cmd_array_runPostInstallation "ERR"
        ;;

        singularity)
            POST="DONOTHING"
        ;;

        namd)
            # Add it to the PATH
            startLoadBar "Run NAMD Post-Installation: Add to PATH "; printf '\n'
            addPATH "namd" "$PWD/../RET_NAMD"
            stopLoadBar
        ;;
    esac
}


# Run install verification
# Input $1: pkg name
function runVerification {
    [ "${SKIPVERI}" = "true" ] && return 0;

    local __pkg_name_runVerification="$1"
    local __cmd_array_runVerification=()
    local __py_vers_runVerification

    case "$__pkg_name_runVerification" in
        rocm)
            rocmVerification
            return "$?";
        ;;

        tensorflow)
            tfVerification
            return "$?";
        ;;

        pytorch)
            [ "$PYVER" = "py2" ] && __cmd_python_runVerification="python" || __cmd_python_runVerification="python3"
            __py_vers_runVerification=$(su -p $SUDO_USER -c "$__cmd_python_runVerification -c 'import torch; print(torch.__version__)'")
            logPrint "NOTE" "The Current Pytorch Version is: $__py_vers_runVerification"
        ;;

        py2 | py3)
            [ "$__pkg_name_runVerification" == "py2" ] && __py_vers_runVerification=$(python --version 2>&1) || __py_vers_runVerification=$(python3 --version 2>&1)
            logPrint "NOTE" "The Current Python Version is: $__py_vers_runVerification"
        ;;

        docker)
            systemctl start docker; DOCKER_VERSION=$(docker version --format '{{.Server.Version}}')
            return "$?";
        ;;

        singularity)
            logPrint "NOTE" "The Current `singularity --version`"
            __cmd_array_runVerification=("singularity --version"); runCmd __cmd_array_runVerification "ERR" 0; return "$?";
        ;;

        namd)
            namdVerification
            return "$?";
        ;;
    esac
}

# Remove packages
# Input $1: args (packages)
function removeCmd {
    local -n __args_removeCmd=$1

    # Remove Packages
    for pkg in "${__args_removeCmd[@]}"; do
        runRemove "$pkg"
    done
}

# Run Remove Process
# Input $1: pkg name
# Input $2: pkg array
# Input $3: ver array
# Input $4: is pkgs already installed
function runRemove {
    local __pkg_name_runRemove="$1"
    local __pkg_name_array_runRemove=()
    local __pkg_vers_array_runRemove=()
    local __isInstalled_runRemove=0

    logPrint "STEP" "Uninstalling ${__pkg_name_runRemove} Packages"

    # Get packages
    buildPkgArray "$__pkg_name_runRemove" __pkg_name_array_runRemove __pkg_vers_array_runRemove __isInstalled_runRemove
    removePkg __pkg_name_array_runRemove


    # Verify if uninstall was successful
    for dep in "${__pkg_name_array_runRemove[@]}"; do
        (isPrgInstalled "${dep}" ) && logPrint "ERR" "The uninstall process was not completed successfully!"
    done
}

# ML benchmark
# Input $1: args (packages)
# Input $2: models
function benchmarkCmd {
    local -n __args_benchmarkCmd=$1
    local -n __models_benchmarkCmd=$2

    local __pkg_name_benchmarkCmd=()
    local __pkg_ver_benchmarkCmd=()
    local __isROCmInstalled_benchmarkCmd=0
    local __isTFInstalled_benchmarkCmd=0
    local __isPTInstalled_benchmarkCmd=0

    startLoadBar "Check ROCm Installation"; printf '\n'; echo
    # read yaml file
    yaml2arr "$REQ_FILE" YAML_ARRAY
    TOTALSTEPS=$((${#__models_benchmarkCmd[@]}+1));
    buildPkgArray "rocm" __pkg_name_benchmarkCmd __pkg_ver_benchmarkCmd __isROCmInstalled_benchmarkCmd
    stopLoadBar

    [ "$__isROCmInstalled_benchmarkCmd" -eq "1" ] && logPrint "ERR" "ROCm is not installed!" "ROCm"

    # Build Package Array
    for ml in "${__args_benchmarkCmd[@]}"; do
        case "$ml" in
            tensorflow)
              logPrint "STEP" "Run ${ml} benchmark"
              buildPkgArray "$ml" __pkg_name_benchmarkCmd __pkg_ver_benchmarkCmd __isTFInstalled_benchmarkCmd
              [ "$__isTFInstalled_benchmarkCmd" -eq "1" ] && logPrint "ERR" "Tensorflow is not installed!" "Tensorflow"
              runBenchmark "$ml" __models_benchmarkCmd
            ;;

            pytorch)
              buildPkgArray "$ml" __pkg_name_benchmarkCmd __pkg_ver_benchmarkCmd __isPTInstalled_benchmarkCmd
              [ "$__isPTInstalled_benchmarkCmd" -eq "1" ] && logPrint "ERR" "Pytorch is not installed!" "Pytorch"
            ;;
        esac
    done
}

# Run benchmark 
#Input $1 ML framework
#Input $2 Models array
function runBenchmark {
    local __ml_framework_runBenchmark=$1
    local -n __models_runBenchmark=$2
    local __cmd_ret_runBenchmark
    local __ret_value_runBenchmark=0
    local __cmd_array_runBenchmark=()

    case "$__ml_framework_runBenchmark" in
        tensorflow)
            tfBenchmark __models_runBenchmark
            return "$?";
        ;;

        pytorch)
            echo "Pytorch benchmarking..."
        ;;

        namd)
            namdBenchmark
            return "$?";
        ;;
    esac
}
